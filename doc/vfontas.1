.TH vfontas 1 "2019-04-21" "hxtools" "hxtools"
.SH Name
.PP
vfontas \(em a bitmap font file transformation utility
.SH Syntax
.PP
\fBvfontas\fP \fIcommands\fP...
.SS Commands
.PP
\fB\-blankfnt\fP
.PP
\fB\-canvas\fP \fIxsize\fP \fIysize\fP
.PP
\fB\-clearmap\fP
.PP
\fB\-crop\fP \fIxpos\fP \fIypos\fP \fIwidth\fP \fIheight\fP
.PP
\fB\-fliph\fP
.PP
\fB\-flipv\fP
.PP
\fB\-invert\fP
.PP
\fB\-lge\fP
.PP
\fB\-loadclt\fP \fIdirectory/\fP
.PP
\fB\-loadfnt\fP \fImu.fnt\fP
.PP
\fB\-loadhex\fP \fIunicode.hex\fP
.PP
\fB\-loadmap\fP \fIcp437AB.uni\fP
.PP
\fB\-loadpsf\fP \fIter-v32b.psfu\fP
.PP
\fB\-savebdf\fP \fIout.bdf\fP \fIfontname\fP
.PP
\fB\-saveclt\fP \fIoutdir/\fP
.PP
\fB\-savefnt\fP \fIx.fnt\fP
.PP
\fB\-savepbm\fP \fIoutdir/\fP
.PP
\fB\-savepsf\fP \fInew.psfu\fP
.PP
\fB\-savesfd\fP \fInew.sfd\fP
.PP
\fB\-upscale\fP \fIxscale\fP \fIyscale\fP
.PP
\fB\-xbrz\fP \fIfactor\fP
.PP
\fB\-xcpi\fP \fIega437.cpi\fP \fIoutdir/\fP
.PP
\fB\-xlat\fP \fIxoffset\fP \fIyoffset\fP
.PP
.SH Description
.PP
vfontas (originally "VGA font file assembler") can transform raster font files
in various ways.
.SS blankfnt
.PP
Initializes the memory buffer with 256 empty 8x16 glyphs. The primary purpose
for this is with \fBsaveclt\fP to get blank glyph files for hand-editing. For a
differently-sized canvas, combine with \fB\-crop\fP or \fB\-canvas\fP.
.SS canvas
.PP
Enlarges the glyph box to the specified size. (It never shrinks it.)
.SS clearmap
.PP
Discards the in-memory glyph index <-> Unicode mapping table.
.SS crop
.PP
Removes an outer area from the glyph images, shrinking the image in the process.
.SS fliph, flipv
.PP
Mirrors/flips glyphs.
.SS lge
.PP
Applies a "Line Graphics Enable" transformation on glyphs. It copies the pixels
in the second rightmost column to the rightmost column, and does this for glyph
indices 0xC0 to 0xDF.
.SS loadclt
.PP
Reads a directory full of CLT files containing glyphs. CLT is a textgraphical
format to facilitate visual editing with a text console editor.
.SS loadfnt
.PP
Reads a headerless bitmap font file, as typically used for CGA/EGA/VGA/MDA
hardware, from the specified file into memory. 8x8x256 (width/height/glyphs),
8x12x256, 8x14x256, 8x16x256 and 8x16x512 are supported.
.SS loadfnth
.PP
Reads a headerless bitmap font file, using the specified height N and width 8.
The number of characters is then autoderived from the filesize.
.SS loadhex
.PP
Reads a Unifont .hex encoded file.
.SS loadmap
.PP
Reads a glyphindex <-> Unicode codepoint mapping table from the given file into
memory. The format follows the maps from /usr/share/kbd/unimaps, that is, "0x00
U+0000" at its simplest. Multiple U+ codepoints can be specified in a line.
\fB\-loadmap\fP does not clear the mapping table, which makes it possible to
cumulate mappings from multiple files.
.SS loadpsf
.PP
Reads a PC Screen Font PSF 2 version 0. If the psf file comes with a mapping
table, the current in-memory table will be discarded and replaced with the one
from the PSF.
.SS savebdf
.PP
Saves the font to a Glyph Bitmap Distribution Format file (BDF). This type of
file can be processed further by other tools such as bdftopcf(1) or
fontforge(1) to, for example, turn them into Portable Compiled Format (PCF) or
TrueType/OpenType (TTF/OTF) files. (See the "Examples" section.)
.SS saveclt
.PP
Saves the current in-memory glyphs as multiple CLT files to the given
directory. CLT is a textgraphical format to facilitate visual editing with a
text console editor.
.SS savefnt
.PP
Saves the current in-memory glyphs to the given file, using the headerless
format.
.SS savemap
.PP
Saves the current in-memory Unicode mapping table to the given file.
.SS savepsf
.PP
Saves the current in-memory glyphs as a PC Screen Font PSF2.0 file, which can
then be loaded into a Linux text console with setfont(1). The in-memory Unicode
mapping table is added to the PSF.
.SS savesfd
.PP
Saves the font to a Spline Font Database file (SFD). This type of file
can be processed further by fontforge(1).
.SS upscale
.PP
Performs a linear upscale by an integral factor for all glyphs.
.SS xbrz
.PP
Performs a xBRZ upscale by an integral factor. xBRZ 1.6 supports up to factor
6. (Higher factors will result in an empty glyph box.)
.SS xcpi
.PP
Extracts a multi-font .cpi file (as was typically used on DOS) as separate .fnt
files into the specified directory. This operation does not touch the in-memory
glyph buffers or Unicode mapping table.
.SS xlat
.PP
Moves all glyphs around within their canvases by the specified amount.
vfontas's coordinate system has (0,0) in the upper left corner, with positive x
going to the right, and positive y going down.
.SH Known limits
.PP
The Linux kernel accepts console font glyphs of at most 32x32 in size.
.SH The Consoleet bitmap format
.PP
The Consoleet text bitmap format is very similar to PBM itself. Instead of "P1"
as in PBM, a CLT file begins with "PCLT" on the first line. In the second line,
width and height of the bitmap in pixels is given. What follow is the bitmap
data: Each "off" pixel is represented by the 2-character string ".." Each "on"
pixel is represented by the 2-character "##". Each row of pixels is terminated
by a newline, like in PBM.
.PP
.nf
	PCLT
	9 7
	..................
	....##....##..##..
	..##..##..##..##..
	..##..##..####....
	..##..##..##..##..
	....##....##..##..
	..................
.fi
.SH Examples
.PP
Decompose a classic file into editable pictograph text files (with the help
of a Unicode map):
.PP
.RS 4
.nf
mkdir mu; vfontas \-loadfnt /usr/share/kbd/consolefonts/mu.fnt \-loadmap
/usr/share/kbd/unimaps/cp437.uni \-saveclt mu/
.fi
.RE
.PP
To convert a .fnt and scale it up to make it comfortably usable with a FullHD
resolution Linux fbconsole:
.PP
.RS 4
.nf
vfontas \-loadfnt mu.fnt \-loadmap cp437.uni \-canvas 9 16 \-lge \-upscale 2 2
\-savepsf mu.psf
.fi
.RE
.PP
To convert a .fnt to TrueType/OpenType/WOFF (the Fontforge part is
unfortunately manual):
.PP
.RS 4
.nf
vfontas \-loadfnt mux.fnt \-loadmap cp437AB.uni \-canvas 9 16 \-lge \-savesfd
mux.sfd # && fontforge mux.sfd
.fi
.RE
.PP
To convert a .fnt for use under X11 and XTerm (generates sizes 12, 24 and 36,
@96dpi):
.PP
.RS 4
.nf
for i in 1 2 3; do vfontas \-loadfnt mux.fnt \-loadmap cp437AB.uni \-canvas 9
16 \-lge \-upscale $i $i \-savebdf \- Mux | bdftopcf | gzip
>~/.fonts/mux$i.pcf.gz; done; xterm \-fa "misc Mux:size=24"
.fi
.RE
.SH Comparison to earlier vfontas (2005-2018) invocation syntax
.PP
`vfontas \-D out/ \-xf x.fnt` has become `vfontas \-loadfnt x.fnt \-saveclt
out/`.
.PP
`vfontas \-D out/ \-cf x.fnt` has become `vfontas \-loadclt out/ \-savefnt x.fnt`.
.PP
`vfontas \-Ecf x.fnt` has become `vfontas \-blankfnt \-savefnt x.fnt`.
.PP
`vfontas \-G <x.fnt >x.psf` has become `vfontas \-loadfnt x.fnt \-canvas 9 16
\-lge \-savepsf2 x.psf`.
.PP
`vfontas \-W <x.fnt >x.psf` has become `vfontas \-loadfnt x.fnt \-upscale 2 1
\-savepsf2 x.psf`.
.PP
`vfontas \-\-cpi \-D out/ \-f x.cpi/` has become `vfontas \-xcpi x.cpi out/`.
.SH See also
.PP
\fBhxtools\fP(7)
